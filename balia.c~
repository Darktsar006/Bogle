/*
 NOM: BAH               		MA
 PRENOM: FATOUMATA BALIA		YAN
 GROUPE:3.2				1.2
 DATE DE CREATION: 2 MARS 2013
 DATE DE DERNIERE MODIFICATION:
 MOTIF DE MODIFICATION:
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
typedef struct cord
{
  int abs;
  int ord;
}Cord;

/*CETTE FONCTION PERMET D'AFFICHER LA GRILLE ELLE PREND POUR PARAMÈTRE
 UNE UN POINTEUR VERS UN TYPE DE TABLEAU DE DEUX DIMENSION, DEUX ENTIERS 
 REPRESENTANT LE NOMBRE DE LIGNES ET DE COLONNES */

void solveur_de_boggle_afficher_grille(char **tab, int lig, int col)
{
     int i;
     int j;
     printf("------------------------\n");
     for(i=0; i<lig; i++)
     {
	  for(j=0; j<col; j++)
	  {
	  printf("| %c ", tab[i][j]);
	  
	  }
	  printf("\n------------------------\n");
     }
}

/*CETTE FONCTION PERMET DE CREER ET DE REMPLIR LA GRILLE DE JEUX*/

void solveur_de_boggle_creer_grille(char **tab, int ligne, int colonne)
{
     int i;
     int j;
     srand(time(NULL));
     for(i=0; i<ligne; i++)
     {    
	  for(j=0; j<colonne; j++)
	       tab[i][j] = rand () % 26 + 'A';
     }
     
     solveur_de_boggle_afficher_grille(tab,ligne,colonne);
}

/* Procedure qui dimmensionne la taille de la grille */

void solveur_de_boggle_dimension(int *ligne, int *colonne)
{
     int choix;
     printf(" _________________________________________________________\n");
     printf("|1 si vous sohaitez redimensionner la grille de jeux      |\n");
     printf("|2 si vous ne souhaitez rien changer                      |\n");
     printf("|_________________________________________________________| \n");
     
     do
     {
	  printf("Votre choix : ");
	  scanf("%d",&choix);
     }while(choix < 1 || choix >2);
     
     if(choix == 1)
     {
	  printf("Donner le nombre de lignes : ");
	  scanf("%d", ligne);
	  printf("Donner le nombre de colonnes : ");
	  scanf("%d", colonne);
     }
}

char Diag_Gauche_Haut(char caract, int i, int j, char **grille)
{
  caract =grille[i-1][j-1];
  return(caract);
}
char Diag_Droit_Haut(char caract, int i, int j, char **grille)
{
  caract =grille[i-1][j+1];
  return(caract);
}
char Diag_Droit_Bas(char caract, int i, int j, char **grille)
{
  caract =grille[i+1][j+1];
  return(caract);
}
char Diag_Gauche_Bas(char caract, int i, int j, char **grille)
{
  caract =grille[i+1][j-1];
  return(caract);
}
char Haut(char caract, int i, int j, char **grille)
{
  caract =grille[i-1][j];
  return(caract);
}
char Bas(char caract, int i, int j, char **grille)
{
  caract =grille[i+1][j];
  return(caract);
}
char Gauche(char caract, int i, int j, char **grille)
{
  caract =grille[i][j-1];
  return(caract);
}
char Droit(char caract, int i, int j, char **grille)
{
  caract =grille[i][j+1];
  return(caract);
}
void trouver_lettre_de_mot_dans_grille(char caract, Cord *cordonnee, char **grille, int ligne, int colonne, int indice[2])
{
  int i;
  int j;
  int k=0;
  cordonnee = malloc(sizeof(struct cord));
  for(i=0; i<ligne; i++)
  {
    for(j=0; j<colonne; j++)
    {
      if(grille[i][j] == caract)
      {
	printf("%c\n",caract);
	cordonnee[k].abs = i;
	cordonnee[k].ord = j;
	printf("%d\n",i);
	printf("%d\n",j);
	realloc(cordonnee, sizeof(Cord));
      }
    }
  }
}

void trouver_mot_dans_grille(char *mot, int ligne, int colonne, int k,char *lettre_trouve, char **grille)
{
  int cpt=0;
  int k=0;
  int cptr;
  Cord *cordonnee;
  trouver_lettre_de_mot_dans_grille(mot[k], cordonnee, grille, ligne, colonne, indice);
  while(cptr == 0)
  {
    cpt = sizeof(cordonnee);
    if(cpt !=0)
    {
      while(cpt !=0)
      {
	if((cordonnee[k].abs>0 && cordonnee[k].abs<n-1) && (cordonnee[k].ord>0 && cordonnee[k].ord<m-1))
	{
	  if( mot[k+1]==Diag_Gauche_Haut(mot[k], cordonnee[k].abs, cordonnee[k].ord, grille)|| mot[k+1]==Diag_Droit_Haut(mot[k],cordonnee[k].abs, cordonnee[k].ord, grille)
	  || mot[k+1]==Diag_Droit_Bas(mot[k], cordonnee[k].abs, cordonnee[k].ord, grille) || mot[k+1]==Diag_Gauche_Bas(mot[k],cordonnee[k].abs,cordonnee[k].ord, grille)
	  || mot[k+1]==Haut(mot[k], cordonnee[k].abs, cordonnee[k].ord, grille) || mot[k+1]==Bas(mot[k], cordonnee[k].abs, cordonnee[k].ord, grille)
	  || mot[k+1]==Gauche(mot[k], cordonnee[k].abs, cordonnee[k].ord,grille) || mot[k+1]==Droit(mot[k], cordonnee[k].abs, cordonnee[k].ord, grille))
	  {
	    cptr = 0;
	    k++;
	  }
	   
	}
      }
    }
    
  }
}
int main()
{
  int i;
  char caract='C';
  char **grille = NULL;
  int ligne = 4;
  int colonne = 4;
  int indice[2];
  solveur_de_boggle_dimension(&ligne, &colonne);
  grille = malloc(sizeof(char*)*ligne);
     for(i=0; i<ligne; i++)
	  grille[i] = malloc(sizeof(char)*colonne);
  solveur_de_boggle_creer_grille(grille, ligne, colonne);
  trouver_lettre_de_mot_dans_grille(caract,grille, ligne,colonne, indice);
  return 0;
}